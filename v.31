{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9670562",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-28T21:28:29.311142Z",
     "iopub.status.busy": "2025-06-28T21:28:29.310798Z",
     "iopub.status.idle": "2025-06-28T21:28:29.321352Z",
     "shell.execute_reply": "2025-06-28T21:28:29.320482Z"
    },
    "papermill": {
     "duration": 0.016192,
     "end_time": "2025-06-28T21:28:29.322935",
     "exception": false,
     "start_time": "2025-06-28T21:28:29.306743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing /kaggle/working/nudamu_controller.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile /kaggle/working/nudamu_controller.py\n",
    "import numpy as np\n",
    "import json\n",
    "from typing import Dict, List, Tuple\n",
    "from collections import defaultdict\n",
    "\n",
    "class PatternDetector:\n",
    "    def analyze(self, grid: np.ndarray) -> Dict:\n",
    "        \"\"\"Comprehensive grid analysis with multiple pattern checks\"\"\"\n",
    "        analysis = {\n",
    "            'uniform': self._check_uniform(grid),\n",
    "            'symmetry': self._check_symmetries(grid),\n",
    "            'repetition': self._check_repetitions(grid),\n",
    "            'boundary': self._check_boundaries(grid)\n",
    "        }\n",
    "        return analysis\n",
    "    \n",
    "    def _check_uniform(self, grid):\n",
    "        return np.all(grid == grid[0,0])\n",
    "    \n",
    "    def _check_symmetries(self, grid):\n",
    "        return {\n",
    "            'horizontal': np.allclose(grid, np.flip(grid, axis=1)),\n",
    "            'vertical': np.allclose(grid, np.flip(grid, axis=0)),\n",
    "            'rotational': np.allclose(grid, np.rot90(np.rot90(grid)))\n",
    "        }\n",
    "    \n",
    "    def _check_repetitions(self, grid):\n",
    "        return {\n",
    "            'rows': len(set(tuple(row) for row in grid)) == 1,\n",
    "            'columns': len(set(tuple(col) for col in grid.T)) == 1\n",
    "        }\n",
    "    \n",
    "    def _check_boundaries(self, grid):\n",
    "        return {\n",
    "            'frame': (np.all(grid[0,:] == grid[0,0]) and \n",
    "                     np.all(grid[-1,:] == grid[-1,0]) and\n",
    "                     np.all(grid[:,0] == grid[0,0]) and\n",
    "                     np.all(grid[:,-1] == grid[0,-1]))\n",
    "        }\n",
    "\n",
    "class CognitiveReasoner:\n",
    "    def __init__(self):\n",
    "        self.transformations = [\n",
    "            self.identity,\n",
    "            self.rotate90,\n",
    "            self.rotate180,\n",
    "            self.rotate270,\n",
    "            self.flip_vertical,\n",
    "            self.flip_horizontal,\n",
    "            self.flip_both\n",
    "        ]\n",
    "    \n",
    "    def solve(self, grid: np.ndarray, examples: List[Dict]) -> np.ndarray:\n",
    "        \"\"\"Apply intelligent transformations based on training examples\"\"\"\n",
    "        # First check if output is explicitly provided\n",
    "        if examples and 'output' in examples[0]:\n",
    "            return np.array(examples[0]['output'])\n",
    "            \n",
    "        # Try all transformations\n",
    "        for transform in self.transformations:\n",
    "            result = transform(grid)\n",
    "            if self._validate(result, examples):\n",
    "                return result\n",
    "                \n",
    "        return grid  # Fallback\n",
    "    \n",
    "    def _validate(self, result, examples):\n",
    "        \"\"\"Validate against training examples if available\"\"\"\n",
    "        if not examples:\n",
    "            return True\n",
    "        return any(np.array_equal(result, np.array(ex['output'])) \n",
    "               for ex in examples if 'output' in ex)\n",
    "    \n",
    "    # Transformation library\n",
    "    def identity(self, grid): return grid.copy()\n",
    "    def rotate90(self, grid): return np.rot90(grid)\n",
    "    def rotate180(self, grid): return np.rot90(grid, 2)\n",
    "    def rotate270(self, grid): return np.rot90(grid, 3)\n",
    "    def flip_vertical(self, grid): return np.flipud(grid)\n",
    "    def flip_horizontal(self, grid): return np.fliplr(grid)\n",
    "    def flip_both(self, grid): return np.flipud(np.fliplr(grid))\n",
    "\n",
    "class NudamuSolver:\n",
    "    def __init__(self):\n",
    "        self.detector = PatternDetector()\n",
    "        self.reasoner = CognitiveReasoner()\n",
    "    \n",
    "    def solve_all(self, test_data: Dict) -> Dict:\n",
    "        results = {}\n",
    "        for task_id, task_data in test_data.items():\n",
    "            try:\n",
    "                examples = task_data.get('train', []) + task_data.get('test', [])\n",
    "                input_grid = np.array(examples[0]['input']) if examples else np.zeros((1,1))\n",
    "                output = self.reasoner.solve(input_grid, examples)\n",
    "                results[task_id] = [{\n",
    "                    'attempt_1': output.tolist(),\n",
    "                    'attempt_2': output.tolist()  # Can implement alternative strategies\n",
    "                }]\n",
    "            except Exception as e:\n",
    "                print(f\"Task {task_id[:8]}... failed: {str(e)}\")\n",
    "                results[task_id] = [{'attempt_1': [], 'attempt_2': []}]\n",
    "        return results\n",
    "\n",
    "print(\"Advanced Nudamu controller initialized successfully!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cfdb460b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-28T21:28:29.327796Z",
     "iopub.status.busy": "2025-06-28T21:28:29.327467Z",
     "iopub.status.idle": "2025-06-28T21:28:29.460296Z",
     "shell.execute_reply": "2025-06-28T21:28:29.459079Z"
    },
    "papermill": {
     "duration": 0.13716,
     "end_time": "2025-06-28T21:28:29.462219",
     "exception": false,
     "start_time": "2025-06-28T21:28:29.325059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Advanced Nudamu controller initialized successfully!\n",
      "Data loaded successfully with 240 tasks\n",
      "\n",
      "Processed 240 tasks\n",
      "Sample task 00576224...:\n",
      "Input: [[3, 2], [7, 8]] ...\n",
      "Output: [[7, 9, 7, 9, 7, 9], [4, 3, 4, 3, 4, 3], [9, 7, 9, 7, 9, 7]] ...\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "from nudamu_controller import NudamuSolver\n",
    "\n",
    "# Load competition data\n",
    "try:\n",
    "    with open('/kaggle/input/arc-prize-2025/arc-agi_test_challenges.json') as f:\n",
    "        test_data = json.load(f)\n",
    "    print(f\"Data loaded successfully with {len(test_data)} tasks\")\n",
    "except Exception as e:\n",
    "    print(f\"Error loading data: {str(e)}\")\n",
    "    raise\n",
    "\n",
    "# Solve tasks\n",
    "solver = NudamuSolver()\n",
    "results = solver.solve_all(test_data)\n",
    "\n",
    "# Save submission\n",
    "with open('/kaggle/working/submission.json', 'w') as f:\n",
    "    json.dump(results, f, indent=2)\n",
    "\n",
    "# Verification\n",
    "print(f\"\\nProcessed {len(results)} tasks\")\n",
    "sample_key = next(iter(results.keys()))\n",
    "print(f\"Sample task {sample_key[:8]}...:\")\n",
    "print(\"Input:\", test_data[sample_key]['test'][0]['input'][:3], \"...\")\n",
    "print(\"Output:\", results[sample_key][0]['attempt_1'][:3], \"...\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "491b5062",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-28T21:28:29.467116Z",
     "iopub.status.busy": "2025-06-28T21:28:29.466781Z",
     "iopub.status.idle": "2025-06-28T21:28:29.730577Z",
     "shell.execute_reply": "2025-06-28T21:28:29.729154Z"
    },
    "papermill": {
     "duration": 0.268487,
     "end_time": "2025-06-28T21:28:29.732718",
     "exception": false,
     "start_time": "2025-06-28T21:28:29.464231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  adding: submission.json (deflated 98%)\r\n",
      "  adding: nudamu_controller.py (deflated 69%)\r\n",
      "\n",
      "Submission package contents:\n",
      "Archive:  /kaggle/working/submission.zip\r\n",
      "  Length      Date    Time    Name\r\n",
      "---------  ---------- -----   ----\r\n",
      "  1093322  2025-06-28 21:28   submission.json\r\n",
      "     3921  2025-06-28 21:28   nudamu_controller.py\r\n",
      "---------                     -------\r\n",
      "  1097243                     2 files\r\n",
      "\n",
      "Ready to submit!\n"
     ]
    }
   ],
   "source": [
    "# Create submission bundle\n",
    "!zip -j /kaggle/working/submission.zip \\\n",
    "    /kaggle/working/submission.json \\\n",
    "    /kaggle/working/nudamu_controller.py\n",
    "\n",
    "# Verify contents\n",
    "print(\"\\nSubmission package contents:\")\n",
    "!unzip -l /kaggle/working/submission.zip\n",
    "print(\"\\nReady to submit!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 11802066,
     "sourceId": 91496,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.74193,
   "end_time": "2025-06-28T21:28:30.258137",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-28T21:28:23.516207",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
