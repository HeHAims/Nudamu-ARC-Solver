{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4d98c9a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-28T21:16:49.245295Z",
     "iopub.status.busy": "2025-06-28T21:16:49.244972Z",
     "iopub.status.idle": "2025-06-28T21:16:49.254997Z",
     "shell.execute_reply": "2025-06-28T21:16:49.254023Z"
    },
    "papermill": {
     "duration": 0.015382,
     "end_time": "2025-06-28T21:16:49.256627",
     "exception": false,
     "start_time": "2025-06-28T21:16:49.241245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing /kaggle/working/nudamu_controller.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile /kaggle/working/nudamu_controller.py\n",
    "import numpy as np\n",
    "import json\n",
    "from typing import Dict, List\n",
    "\n",
    "class NudamuSolver:\n",
    "    def __init__(self):\n",
    "        self.detector = PatternDetector()\n",
    "        self.reasoner = CognitiveReasoner()\n",
    "    \n",
    "    def solve_all(self, test_data: Dict) -> Dict:\n",
    "        results = {}\n",
    "        for task_id, task_data in test_data.items():\n",
    "            try:\n",
    "                input_grid = np.array(task_data[\"test\"][0][\"input\"])\n",
    "                output = self.reasoner.solve(input_grid)\n",
    "                results[task_id] = [{\n",
    "                    \"attempt_1\": output.tolist(),\n",
    "                    \"attempt_2\": output.tolist()\n",
    "                }]\n",
    "            except Exception as e:\n",
    "                print(f\"Skipped {task_id}: {str(e)}\")\n",
    "        return results\n",
    "\n",
    "class PatternDetector:\n",
    "    def detect(self, grid: np.ndarray) -> str:\n",
    "        if np.all(grid == grid[0,0]): return \"uniform\"\n",
    "        return \"unknown\"\n",
    "\n",
    "class CognitiveReasoner:\n",
    "    def solve(self, grid: np.ndarray) -> np.ndarray:\n",
    "        # YOUR SOLVER LOGIC HERE\n",
    "        return grid  # Default: identity transform\n",
    "\n",
    "print(\"Controller created successfully!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e2b64c2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-28T21:16:49.262427Z",
     "iopub.status.busy": "2025-06-28T21:16:49.261713Z",
     "iopub.status.idle": "2025-06-28T21:16:49.530711Z",
     "shell.execute_reply": "2025-06-28T21:16:49.529614Z"
    },
    "papermill": {
     "duration": 0.273643,
     "end_time": "2025-06-28T21:16:49.532447",
     "exception": false,
     "start_time": "2025-06-28T21:16:49.258804",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Controller created successfully!\n",
      "Data loaded successfully\n",
      "\n",
      "Processed 240 tasks\n",
      "Sample output: [[3, 2], [7, 8]]\n",
      "\n",
      "Files in /kaggle/working:\n",
      "total 1600\r\n",
      "---------- 1 root root    6478 Jun 28 21:16 __notebook__.ipynb\r\n",
      "-rw-r--r-- 1 root root    1089 Jun 28 21:16 nudamu_controller.py\r\n",
      "drwxr-xr-x 2 root root    4096 Jun 28 21:16 __pycache__\r\n",
      "-rw-r--r-- 1 root root 1620044 Jun 28 21:16 submission.json\r\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "from nudamu_controller import NudamuSolver\n",
    "\n",
    "# Load competition data\n",
    "try:\n",
    "    with open('/kaggle/input/arc-prize-2025/arc-agi_test_challenges.json') as f:\n",
    "        test_data = json.load(f)\n",
    "    print(\"Data loaded successfully\")\n",
    "except Exception as e:\n",
    "    print(f\"Error loading data: {str(e)}\")\n",
    "    raise\n",
    "\n",
    "# Solve tasks\n",
    "solver = NudamuSolver()\n",
    "results = solver.solve_all(test_data)\n",
    "\n",
    "# Save submission\n",
    "with open('/kaggle/working/submission.json', 'w') as f:\n",
    "    json.dump(results, f, indent=2)\n",
    "\n",
    "# Verify\n",
    "print(f\"\\nProcessed {len(results)} tasks\")\n",
    "print(\"Sample output:\", list(results.values())[0][0][\"attempt_1\"] if results else \"No results\")\n",
    "print(\"\\nFiles in /kaggle/working:\")\n",
    "!ls -l /kaggle/working"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ada4e055",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-28T21:16:49.537706Z",
     "iopub.status.busy": "2025-06-28T21:16:49.537349Z",
     "iopub.status.idle": "2025-06-28T21:16:49.682188Z",
     "shell.execute_reply": "2025-06-28T21:16:49.680881Z"
    },
    "papermill": {
     "duration": 0.149443,
     "end_time": "2025-06-28T21:16:49.683917",
     "exception": false,
     "start_time": "2025-06-28T21:16:49.534474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-rw-r--r-- 1 root root 1.1K Jun 28 21:16 /kaggle/working/nudamu_controller.py\r\n",
      "Entries: 240\n",
      "Sample entry: [{'attempt_1': [[3, 2], [7, 8]], 'attempt_2': [[3, 2], [7, 8]]}]\n"
     ]
    }
   ],
   "source": [
    "# Verify controller file exists\n",
    "!ls -lh /kaggle/working/nudamu_controller.py\n",
    "\n",
    "# Check submission file structure\n",
    "import json\n",
    "with open('/kaggle/working/submission.json') as f:\n",
    "    data = json.load(f)\n",
    "print(f\"Entries: {len(data)}\")\n",
    "print(\"Sample entry:\", next(iter(data.values())))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1fef0122",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-28T21:16:49.689409Z",
     "iopub.status.busy": "2025-06-28T21:16:49.689025Z",
     "iopub.status.idle": "2025-06-28T21:16:49.959638Z",
     "shell.execute_reply": "2025-06-28T21:16:49.958397Z"
    },
    "papermill": {
     "duration": 0.27553,
     "end_time": "2025-06-28T21:16:49.961585",
     "exception": false,
     "start_time": "2025-06-28T21:16:49.686055",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  adding: submission.json (deflated 98%)\r\n",
      "  adding: nudamu_controller.py (deflated 55%)\r\n",
      "Archive:  /kaggle/working/submission.zip\r\n",
      "  Length      Date    Time    Name\r\n",
      "---------  ---------- -----   ----\r\n",
      "  1620044  2025-06-28 21:16   submission.json\r\n",
      "     1089  2025-06-28 21:16   nudamu_controller.py\r\n",
      "---------                     -------\r\n",
      "  1621133                     2 files\r\n"
     ]
    }
   ],
   "source": [
    "# Create zip for submission\n",
    "!zip -j /kaggle/working/submission.zip \\\n",
    "    /kaggle/working/submission.json \\\n",
    "    /kaggle/working/nudamu_controller.py\n",
    "    \n",
    "# Verify zip contents\n",
    "!unzip -l /kaggle/working/submission.zip"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 11802066,
     "sourceId": 91496,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.490149,
   "end_time": "2025-06-28T21:16:50.382654",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-28T21:16:43.892505",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
